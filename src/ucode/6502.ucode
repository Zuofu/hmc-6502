# 6502.ucode
# 6502 microcode table for hmc-6502
# 28oct07
# tbarr at cs hmc edu
# hjustice at hmc edu
# kmarsh at cs hmc edu
#
# Microcode for the Mudd II hmc-6502.  This table is used as input by
# /src/ucode/ucasm.py to generate the contents of the system verilog case
# structure in control.sv for the state ROM (called state_pla in the verilog).
#
# Each labeled section, called a state, executes some number of cycles,
# referred to as cycles or lines.  Each line describes the control signals
# that are important to that cycle.  Each signal listed will be set by
# /src/ucode/ucasm.py when it assembles this table. If any signal is listed
# as "func", the opcode ROM is used to determine the control signals rather
# than the state ROM -- see func_mux, c_op_state, and c_op_opcode in
# control.sv to see which signals these are.
# 
# Finally, two warnings: because a "func" listed anywhere in a line will
# trigger the opcode ROM, other signals may be set in that line that are not
# actually used because they will be selected from the opcode ROM instead of
# the state ROM.  This is confusing and the assembler should have been
# written to prevent it, but it is something we must deal with.  Second,
# when next_s is listed for the last cycle in a state, the state that gets
# jumped to must appear earlier in this file than the first reference to it.
# Basically the assembler takes a single pass and has to know about a state
# before it can reference it.

reset:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	pcinc
0x00	-	pass	p	p	-	-	-	-	0
0x00	-	pass	a	0	-	-	-	-	0
0x00	-	pass	x	0	-	-	-	-	0
0x00	-	pass	y	0	-	-	-	-	0
0xff	-	pass	sp	0	-	-	-	-	0
# load program counter from {0xfffd, 0xfffc}.
0xff	-	pass	-	0	-	-	-	1	0
0xfd	-	pass	-	0	-	temp	r	-	0
db	-	pass	pc_h	10	r	-	-	0	0
0xfc	-	pass	-	0	-	temp	r	-	0
db	-	pass	pc_l	01	r	-	-	0	0
0x00	-	pass	-	0	-	pc_n	pc_n	0	0

# ROM index of base needs to be hard coded into ucasm.py.  If you make any
# changes above this point, make sure to update ucasm.py.
base:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	sta_src	last_cy
db	-	pass	none	1	pc_n	pc_n	pc_n	0	0	opcode	0

branch_taken:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc	flag	tl_lat	th_lat	c_sel
tl	-	rol	none	0	-	-	-	0	t	0	0	-
0x00	-	dec	none	0	-	-	-	0	0	0	1	t
th	pc_h	add	pc_h	10	r	-	-	0	0	0	0	0
tl	pc_l	add	pc_l	01	r	-	-	0	t	0	0	0
0x0	pc_h	add+t	pc_h	10	r	r	pc_n	0	0	0	1	-

branch_head:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc	flag	tl_lat	th_lat	nxt_src
db	-	pass	none	1	pc_n	pc_n	pc_n	1	t	1	0	b
# if we don't take the branch, go back to base.

none:
# just fetch next instruction
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
-	-	pass	none	0	-	pc_n	pc_n	0	0

single_byte:
a_sel	b_sel	alu_op	wrt_en	pcinc	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
func	func	func	func	0	-	pc_n	pc_n	0	1

set_flag:
a_sel	b_sel	alu_op	wrt_en	pcinc	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
0xff	-	pass	p	0	-	pc_n	pc_n	0	1

clear_flag:
a_sel	b_sel	alu_op	wrt_en	pcinc	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
0x00	-	pass	p	0	-	pc_n	pc_n	0	1

imm:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

mem_ex_zpa:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	-	pass	none	0	pc_n	0	r	0	0	imm

mem_wr_final:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri
db	-	-	none	1	pc_n	pc_n	pc_n	0	1	0

mem_wr_zpa:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	func	pass	none	0	pc_n	0	r	0	0	b	mem_wr_final

mem_wr_zpxy2:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
-	func	-	none	0	-	0	temp	0	0	b	mem_wr_final

mem_wr_zpx:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	x	add	none	0	pc_n	0	-	1	0	0	mem_wr_zpxy2

mem_wr_zpy:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	y	add	none	0	pc_n	0	-	1	0	0	mem_wr_zpxy2

mem_wr_abs:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	-	pass	none	1	pc_n	pc_n	pc_n	1	0	0	-
db	func	pass	none	0	-	r	temp	0	0	b	mem_wr_final

mem_wr_abxy2:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri	next_s
db	-	pass+t	none	0	-	-	-	1	0	0	0	-
db	func	pass	none	0	-	temp	temp	0	0	0	b	mem_wr_final

mem_wr_abx:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri	next_s
db	x	add	none	1	pc_n	pc_n	pc_n	0	1	t	0	mem_wr_abxy2

mem_wr_aby:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri	next_s
db	y	add	none	1	pc_n	pc_n	pc_n	0	1	t	0	mem_wr_abxy2

mem_wr_idy:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri	next_s
# Address of low byte comes in over data line -- save it in temp_high and pass it to address
db	-	pass	none	0	-	0	r	1	0	0	0	-
# Low byte comes in on data -- pass it and store in temp_low
db	-	pass	none	0	-	pc_n	pc_n	0	1	0	0	-
# Increment address of low byte to get address of high byte -- pass to address 
th	-	inc	none	0	-	0	r	0	0	0	0	-
# Data from high byte comes in -- save in temp_high
db	-	pass	none	0	-	-	-	1	0	0	0	-
# Add y to low byte and save back in low byte
tl	y	add	none	0	-	temp	r	0	1	t	0	-
# Add carry to high byte and save back in high byte
th	-	pass+t	none	0	-	r	temp	1	0	0	0	-
# Use temporary register as address and write whatever func says
-	func	pass	none	0	-	temp	temp	0	0	0	b	mem_wr_final

mem_wr_idx:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri	next_s
# store instruction input in temp_low:
db	-	pass	none	0	-	-	-	0	1	0	0	-
# get memory location of high byte address:
tl	x	add+1	none	0	-	0	r	0	0	0	0	-
# store high byte address in temp_high:
db	-	pass	none	0	-	-	-	1	0	0	0	-
# get memory location of low byte address:
tl	x	add	none	0	-	0	r	0	0	0	0	-
# knowing result is low byte address, get data for writing:
db	func	pass	none	0	-	temp	r	0	0	0	b	mem_wr_final

abs:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	-	pass	none	1	pc_n	pc_n	pc_n	1	0	-
db	-	pass	none	0	-	r	temp	0	0	imm

indirect_x:
# Fetch opcode, then base offset+X, stored in a_lat. Repeat for offset+x+1, 
# assert onto address bus, use as high part of next fetch
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	next_s
# store instruction input in temp_low:
db	-	pass	none	0	-	-	-	0	1	0	-
# get memory location of high byte address:
tl	x	add+1	none	0	-	0	r	0	0	0	-
# store high byte address in temp_high:
db	-	pass	none	0	-	-	-	1	0	0	-
# get memory location of low byte address:
tl	x	add	none	0	-	0	r	0	0	0	-
# knowing result is low byte address, get data from memory:
db	-	pass	none	0	-	temp	r	0	0	0	imm

abs_xy_final:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	-	pass+t	none	0	-	r	temp	0	0	imm

abs_x:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	x	add	none	1	pc_n	pc_n	pc_n	1	t	abs_xy_final

abs_y:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	y	add	none	1	pc_n	pc_n	pc_n	1	t	abs_xy_final

zp_x:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	x	add	none	0	-	0	r	0	0	imm

zp_y:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	next_s
db	y	add	none	0	-	0	r	0	0	imm

inc:
a_sel	b_sel	alu_op	wrt_en	pcinc	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
func	func	inc	func	0	-	pc_n	pc_n	0	1

dec:
a_sel	b_sel	alu_op	wrt_en	pcinc	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
func	func	dec	func	0	-	pc_n	pc_n	0	1

# acc: (takes value in accumulator, sends it through ALU, and puts result in accumulator)
acc:
a_sel	b_sel	alu_op	wrt_en	pcinc	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
-	a	func	func	0	pc_n	pc_n	pc_n	0	1

mem_rw_final:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri
db	-	-	none	1	pc_n	pc_n	pc_n	0	0	0

mem_rw_zp2:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	func	func	func	0	-	0	temp	0	1	r	mem_rw_final

mem_rw_zpa:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	-	pass	none	0	pc_n	0	r	1	0	0	mem_rw_zp2

mem_rw_zpx:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri	next_s
db	x	add	none	0	pc_n	0	r	1	0	0	mem_rw_zp2

mem_rw_ab2:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	th_lat	flag	memwri	next_s
db	func	func	func	0	-	temp	temp	0	0	1	r	mem_rw_final

mem_rw_abs:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	th_lat	flag	memwri	next_s
db	-	pass	none	1	pc_n	pc_n	pc_n	1	0	0	0	-
db	-	pass	none	0	pc_n	r	temp	0	1	0	0	mem_rw_ab2

mem_rw_abx:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	th_lat	flag	memwri	next_s
db	x	add	none	1	pc_n	pc_n	pc_n	1	0	t	0	-
db	-	pass+t	none	0	pc_n	r	temp	0	1	0	0	mem_rw_ab2

indirect_y:
# two cycles longer than on original 6502
# "indirect indexed" addressing: *((*arg)+y)
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	next_s
# Address of low byte comes in over data line -- save it in temp_high and pass it to address
db	-	pass	none	0	-	0	r	1	0	0	-
# Low byte comes in on data -- pass it and store in temp_low
db	-	pass	none	0	-	-	-	0	1	0	-
# Increment address of low byte to get address of high byte -- pass to address 
th	-	inc	none	0	-	0	r	0	0	0	-
# Data from high byte comes in -- save in temp_high
db	-	pass	none	0	-	-	-	1	0	0	-
# Add y to low byte and save back in low byte
tl	y	add	none	0	-	-	-	0	1	t	-
# Add carry to high byte and save back in high byte
th	-	pass+t	none	0	-	-	-	1	0	0	-
# Get data from address stored in temps
db	-	pass	none	0	-	temp	temp	0	0	0	imm

# store and read-modify-write instructions look a lot like these.
# RMW ops must use non-default data read source R.

push_final:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	c_sel
-	-	-	none	1	pc_n	pc_n	pc_n	0	0	-

# push/pull used only for accumulator; push_flags/pull_flags used for PHP/PLP
push:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	c_sel	next_s
sp	func	dec	sp	0	-	1	r	b	0	1	push_final

pull_final:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	c_sel
sp	-	inc	sp	1	pc_n	pc_n	pc_n	0	0	1

pull:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	c_sel	next_s
sp	-	pass	none	0	-	1	r	0	0	-	-
db	-	pass	func	0	-	-	-	0	0	0	pull_final

push_flags:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	c_sel	next_s
sp	p	dec	sp	0	-	1	r	b	0	1	push_final

pull_flags:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	c_sel	next_s
sp	-	pass	none	0	-	1	r	0	0	-	-
db	-	pass	p	0	-	-	-	0	0	-	pull_final

jsr:
# push high order byte of pc+2, then low order byte, jump to {pcl, pch}.
# one cycle long.
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	memwri	pcinc
db	-	pass	none	1	pc_n	pc_n	pc_n	0	1	0	1
db	-	pass	none	0	-	-	-	1	0	0	1
sp	pc_h	dec	sp	0	-	1	r	0	0	b	0
sp	pc_l	dec	sp	0	-	1	r	0	0	b	0
tl	-	pass	pc_l	01	r	-	-	0	0	0	0
th	-	pass	pc_h	10	r	temp	temp	0	0	0	0

jmp_abs:
# absolute jump
# can't munge PC until we fetch the high part, so we write the low part back
# on the third cycle
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat
db	-	pass	none	1	pc_n	pc_n	pc_n	0	1
db	-	pass	pc_h	10	r	r	temp	1	0
tl	-	pass	pc_l	01	r	temp	temp	0	0

jmp_ind_final:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	pcinc
db	-	pass	pc_l	01	r	-	-	0	0	0
tl	-	inc	none	0	-	temp	r	0	0	0
# this is where we'd fix Mr. Peddle's bug.
db	-	pass	pc_h	10	r	r	pc_n	0	0	0

jmp_ind:
# recall bug with page crossing
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	pcinc	next_s
db	-	pass	none	1	pc_n	pc_n	pc_n	0	1	1	-
db	-	pass	none	0	-	r	temp	1	0	0	jmp_ind_final

rts:
# pull low, then high of pc, jump to pc+1
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc
sp	-	pass	none	0	-	1	r	0
db	-	pass	pc_l	01	r	-	-	0
sp	-	inc	sp	0	-	1	r	0
db	-	pass	pc_h	10	r	-	-	0
sp	-	inc	sp	1	pc_n	pc_n	pc_n	1

rti:
# pull p, then pc, jump to pc. similar to above, but don't increment PC
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc	flag	next_s
sp	-	pass	none	0	-	1	r	0	0	-
db	-	pass	p	0	-	-	-	0	1	-
sp	-	inc	sp	0	-	1	r	0	0	-
db	-	pass	pc_l	01	r	-	-	0	0	-
sp	-	inc	sp	0	-	1	r	0	0	-
db	-	pass	pc_h	10	r	-	-	0	0	pull_final

break:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri	pcinc	tl_lat	th_lat	c_sel	flag	next_s
# set break flag
0x10	-	pass	p	1	-	pc_n	pc_n	0	1	0	0	0	1	-
# once pc has been incremented again, push it onto the stack
sp	pc_h	dec	sp	0	-	1	r	b	0	0	0	1	0	-
sp	pc_l	dec	sp	0	-	1	r	b	0	0	0	1	0	-
# push processor onto the stack
sp	p	dec	sp	0	-	1	r	b	0	0	0	1	0	-
# set interrupt flag
0x14	-	pass	p	1	-	pc_n	pc_n	0	1	0	0	0	1	-
# load and set PC to address stored at $FFFE-$FFFF
0xfe	-	pass	none	0	-	-	-	0	0	1	0	0	0	-
0xff	-	pass	none	0	-	r	temp	0	0	0	1	0	0	jmp_ind_final

