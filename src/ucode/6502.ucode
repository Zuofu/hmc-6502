# 6502.ucode
# input for ucodeasm
# tbarr at cs hmc edu, 28oct07

reset:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	pcinc
0x00	-	pass	p	p	-	-	-	-	0
0x00	-	pass	a	0	-	-	-	-	0
0xf0	-	pass	pc_h	10	r	-	-	1	0
0x00	-	pass	pc_l	01	r	temp	r	0	0

# ensure that base state in assembler is changed to reflect changes here.
base:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	sta_src	last_cy
db	-	pass	none	1	pc_n	pc_n	pc_n	0	0	opcode	0

none:
# just fetch next instruction
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
-	-	pass	none	1	pc_n	pc_n	pc_n	0	0

single_byte:
# 1.0
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
func	func	func	func	0	-	pc_n	pc_n	0	1

imm:
# immediate addressing (5.4)
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

mem_ex_zpa:
# 5.6
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	-	pass	none	0	pc_n	0	r	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

mem_wr_zpa:
# 5.6
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri
db	func	pass	none	0	pc_n	0	r	0	0	b
db	-	-	none	1	pc_n	pc_n	pc_n	0	1	0

mem_wr_zpx:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri
db	x	add	none	0	pc_n	0	-	1	0	0
-	func	-	none	0	-	0	temp	0	0	b
db	-	-	none	1	pc_n	pc_n	pc_n	0	1	0

mem_wr_zpy:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri
db	y	add	none	0	pc_n	0	-	1	0	0
-	func	-	none	0	-	0	temp	0	0	b
db	-	-	none	1	pc_n	pc_n	pc_n	0	1	0

mem_wr_abs:
# 5.6
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag	memwri
db	-	pass	none	1	pc_n	pc_n	pc_n	1	0	0
db	func	pass	none	0	-	r	temp	0	0	b
db	-	-	none	1	pc_n	pc_n	pc_n	0	1	0

mem_wr_idy:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri
# IAL in over data bus
db	-	pass	none	0	-	0	r	1	0	0	0
# BAL in over data bus
db	-	pass	none	0	-	0	0	0	1	0	0
# Grab the next byte.
th	-	inc	none	0	-	0	r 	0	0	0	0
# BAH in over data bus
db	-	pass	none	0	-	r	temp	1	0	0	0
# [BAH, BAL] in over data bus (discard)
tl	y	add	none	0	-	temp	r	0	1	t	0
# [BAH, BAL+y] in over data bus (discard)
th	-	pass+t	none	0	-	r	temp	1	0	0	0
# [BAH+c, BAL+y] in over data bus (correct vector)
-	func	pass	none	0	-	temp	temp	0	0	0	b
# final state (same for all writes)
db	-	-	none	1	pc_n	pc_n	pc_n	0	0	1	0


# TRASH THIS:
# get low byte of address stored in memory
#db	-	pass	none	0	pc_n	0	r	1	0	0	0
# add value of Y to low byte of address
#db	y	add	none	0	-	0	r	0	1	0	0
# get high byte of address stored in memory (needs to include carry in from determining low byte...)
#th	-	inc	none	0	-	0	r	0	0	0	0
#db	-	pass+t	none	0	-	0	r	1	0	0	0
# value to write to memory
#-	func	pass	none	0	-	temp	temp	0	0	0	b
# final state (same for all writes)
#db	-	-	none	1	pc_n	pc_n	pc_n	0	0	1	0

#mem_wr_idx:
#a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag	memwri
# add x to input value
#db	x	add	none	0	pc_n	0	-	0	1	0	0
#db	-	pass	none	0	-	pc_n	pc_n		

abs:
#5.5
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	-	pass	none	1	pc_n	pc_n	pc_n	1	0
db	-	pass	none	0	-	r	temp	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

indirect_x:
# Fetch opcode, then base offset+X, stored in a_lat. Repeat for offset+x+1, 
# assert onto address bus, use as high part of next fetch
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	x	add	none	0	-	0	r	0	0
db	-	pass	none	0	-	0	-	1	0
db	x	add+1	none	0	-	0	r	0	0
db	-	pass	none	0	-	r	temp	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

abs_x:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	x	add	none	1	pc_n	pc_n	pc_n	1	t
db	-	pass+t	none	0	-	r	temp	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

# abs_y looks like abs_x.
#
abs_y:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	y	add	none	1	pc_n	pc_n	pc_n	1	t
db	-	pass+t	none	0	-	r	temp	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

zp_x:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	x	add	none	0	-	0	r	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1

# zp_y looks like zp_x.
#
zp_y:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	tl_lat	flag
db	y	add	none	0	-	0	r	0	0
db	func	func	func	1	pc_n	pc_n	pc_n	0	1


indirect_y:
# over by two cycles
# "indirect indexed" addressing: *((*arg)+y)
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	flag
# IAL in over data bus
db	-	pass	none	0	-	0	r	0	0	0
# BAL in over data bus
db	-	pass	none	0	-	pc_n	pc_n	0	1	0
# IAL back in over data bus
db	-	inc	none	0	-	0	r	0	0	0
# BAH in over data bus
db	-	pass	none	0	-	r	temp	1	0	0
# [BAH, BAL] in over data bus (discard)
tl	y	add	none	0	-	temp	r	0	1	t
# [BAH, BAL+y] in over data bus (discard)
th	-	pass+t	none	0	-	r	temp	1	0	0
# [BAH+c, BAL+y] in over data bus (correct vector)
db	func	func	func	1	pc_n	pc_n	pc_n	0	0	1

# store and read-modify-write instructions look a lot like these.
# RMW ops must use non-default data read source R.

push:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri
sp	func	dec	sp	0	-	1	r	1
-	-	-	none	pc_n	pc_n	pc_n	pc_n	0

pull:                                                                           
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	memwri
sp	-	pass	none	0	-	1	r	0
db	-	pass	func	0	-	-	-	0
sp	-	inc	sp	1	pc_n	pc_n	pc_n	0

jsr:
# push high order byte of pc+2, then low order byte, jump to {pcl, pch}.
# one cycle long.
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	memwri	pcinc
db	-	pass	none	1	pc_n	pc_n	pc_n	0	1	0	1
db	-	pass	none	0	-	-	-	1	0	0	1
sp	pc_h	dec	sp	0	-	1	r	0	0	1	0
sp	pc_l	dec	sp	0	-	temp	temp	0	0	1	0
tl	-	pass	pc_l	01	r	-	-	0	0	0	0
th	-	pass	pc_h	10	r	temp	temp	0	0	0	0

jmp_abs:
# absolute jump
# can't munge PC until we fetch the high part, so we write the low part back
# on the third cycle
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat
db	-	pass	none	1	pc_n	pc_n	pc_n	0	1
db	-	pass	pc_h	10	r	r	temp	1	0
tl	-	pass	pc_l	01	r	temp	temp	0	0

jmp_ind:
# recall bug with page crossing
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	th_lat	tl_lat	pcinc
db	-	pass	none	1	pc_n	pc_n	pc_n	0	1	1
db	-	pass	none	0	-	r	temp	1	0	0
db	-	pass	pc_l	01	r	-	-	0	0	0
tl	-	inc	none	0	-	temp	r	0	0	0
# this is where we'd fix Mr. Peddle's bug.
db	-	pass	pc_h	10	r	r	pc_n	0	0	0

rts:
# pull low, then high of pc, jump to pc+1
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc
sp	-	pass	none	0	-	1	r	0
db	-	pass	pc_l	01	r	-	-	0
sp	-	dec	sp	0	-	1	r	0
db	-	pass	pc_h	10	r	-	-	0
sp	-	dec	sp	1	pc_n	pc_n	pc_n	1

rti:
# pull p, then pc, jump to pc. similar to above, but don't increment PC
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc	flag
sp	-	pass	none	0	-	1	r	0	0
db	-	pass	p	0	-	-	-	0	1
sp	-	dec	sp	0	-	1	r	0	0
db	-	pass	pc_l	01	r	-	-	0	0
sp	-	dec	sp	0	-	1	r	0	0
db	-	pass	pc_h	10	r	-	-	0	0
sp	-	dec	sp	1	pc_n	pc_n	pc_n	0	0

branch_head:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc	flag	tl_lat	th_lat	nxt_src
db	pc_l	add+1	none	1	pc_n	pc_n	pc_n	1	t	1	0	b

# if we don't take the branch, go back to base.

branch_taken:
a_sel	b_sel	alu_op	wrt_en	pc_w_en	pc_sel	a_h_sel	a_l_sel	pcinc	flag	tl_lat	th_lat
0x0	pc_h	add+t	pc_h	10	r	-	-	0	0	0	1
tl	-	pass	pc_l	01	r	temp	temp	0	0	0	0
